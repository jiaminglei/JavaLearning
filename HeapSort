
import java.util.Arrays;

public class HeapSort1 {
	private static int leftChild(int i){
		return 2*i+1;
	}
	
	private static <AnyType extends Comparable<? super AnyType>>
	void percDown(AnyType [] a, int i, int n){
		int child;
		AnyType temp;
		
		for (temp = a[i]; leftChild(i) < n; i = child){
			child = leftChild(i);
			if (child != n-1 && a[child].compareTo(a[child+1])<0)
				child++;
			if (temp.compareTo(a[child])<0)
				a[i] = a[child];
			else {
				break;
			}
		}
		a[i] = temp;
	}
	
	public static <AnyType extends Comparable<? super AnyType>>
	void heapsort(AnyType [] a){
		for (int i =a.length/2; i>=0; i--){
			percDown(a, i, a.length);
		}
		for (int i = a.length -1; i > 0; i--){
			swapReference(a, 0, i);
			percDown(a, 0, i);
		}
	}
	
	public static <AnyType extends Comparable<? super AnyType>>
	void swapReference(AnyType[] a, int left, int right){
		AnyType temp = a[left];
        a[left] = a[right];
        a[right] = temp;
	}
	
	public static void main(String[] args){
		Integer a[] = {5,15,1,23,81,2,77,6};
		heapsort(a);
		
		System.out.println(Arrays.toString(a));
	}
}
